<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML+CSS</title>
    <url>/2023/01/09/HTML/</url>
    <content><![CDATA[<p>HTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。<br>HTML的英文全称是 Hyper Text Markup Language，即超文本标记语言。HTML是由Web的发明者 Tim Berners-Lee和同事 Daniel W. Connolly于1990年创立的一种标记语言，它是标准通用化标记语言SGML的应用。用HTML编写的超文本文档称为HTML文档，它能独立于各种操作系统平台(如UNIX， Windows等)。使用HTML，将所需要表达的信息按某种规则写成HTML文件，通过专用的浏览器来识别，并将这些HTML文件“翻译”成可以识别的信息，即我们所见到的网页。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2022/12/27/JavaScript/</url>
    <content><![CDATA[<p>JavaScript（JS）是一种具有函数优先特性的轻量级、解释型或者说即时编译型的编程语言。虽然作为 Web 页面中的脚本语言被人所熟知，但是它也被用到了很多非浏览器环境中，例如 Node.js、Apache CouchDB、Adobe Acrobat 等。进一步说，JavaScript 是一种基于原型、多范式、单线程的动态 (en-US)语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。</p>
<h2 id="JS代码质量工具"><a href="#JS代码质量工具" class="headerlink" title="JS代码质量工具"></a>JS代码质量工具</h2><p>JavaScript Booster</p>
<h2 id="面试重点"><a href="#面试重点" class="headerlink" title="面试重点"></a>面试重点</h2><h3 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h3><p>1、作用域的目的限制变量访问的环境，在查找某个变量的时候子级作用域会一层一层的往上找，找不到会报错is not defind<br>es6快捷作用域，要配合es6定义变量的方法如const、let </p>
<p>2、全局作用域没有回收机制</p>
<h3 id="二、闭包"><a href="#二、闭包" class="headerlink" title="二、闭包"></a>二、闭包</h3><p>专业的文献：闭包（closure）是一个函数以及其捆绑的周边环境状态（lexical environment，词法环境）的引用的组合。换而言之，闭包让开发者可以从内部函数访问外部函数的作用域。在 JavaScript 中，闭包会随着函数的创建而被同时创建。<br>自己理解：闭包就是函数嵌套函数子函数可以访问父级函数里的变量<br>闭包的优缺点：<br>优点：<br>1、可以将一个变量或者方法长期存储在内存中，用于缓存。<br>2、闭包的变量或者方法一直处于引用的状态所以变量不会销毁<br>3、可以避免全局变量的污染。<br>4、比局部变量使用起来更加灵活<br>缺点：<br>由于闭包不会自动释放内存和销毁变量，也就是说当闭包的变量过多时就会占用更多的内存从而导致运行变慢<br>解决方法：在闭包使用结束后手动清楚或者把值置空</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Mozilla&quot;</span>; <span class="hljs-comment">// name 是一个被 init 创建的局部变量</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">displayName</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// displayName() 是内部函数，一个闭包</span><br>      <span class="hljs-title function_">alert</span>(name); <span class="hljs-comment">// 使用了父函数中声明的变量</span><br>  &#125;<br>  <span class="hljs-title function_">displayName</span>();<br>&#125;<br><span class="hljs-title function_">init</span>();<br></code></pre></td></tr></table></figure>
<h3 id="三、this"><a href="#三、this" class="headerlink" title="三、this"></a>三、this</h3><p>this的值是在函数执行时决定的，不是在函数定义时决定<br>在绝大多数情况下，函数的调用方式决定了 this 的值（运行时绑定）。this 不能在执行期间被赋值，并且在每次函数被调用时 this 的值也可能会不同。ES5 引入了 bind 方法来设置函数的 this 值，而不用考虑函数如何被调用的。ES2015 引入了箭头函数，箭头函数不提供自身的 this 绑定（this 的值将保持为闭合词法上下文的值）。</p>
<h3 id="四、JavaScript的六种继承方法"><a href="#四、JavaScript的六种继承方法" class="headerlink" title="四、JavaScript的六种继承方法"></a>四、JavaScript的六种继承方法</h3><p><strong>new关键字在创建对象的时候具体都干了什么事？？ 背</strong><br>  在内存中创建了一个虚拟的空对象（为了方便理解 例如：var json &#x3D; {}）<br>  将json对象结构传入到这个函数对象结构本身，<br>  运行当前构造函数对象结构，看在其this环境指向上有无属性或者是方法，<br>  如果函数的this指向上有属性或者是方法，则在这个json对象上进行添加<br>  如果没有则直接返回最初创建的那个空的json对象</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span>实例对象，原型对象，构造函数，prototype __proto__ constructor 之间的关系<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>=<span class="hljs-string">&#x27;小明&#x27;</span><br>&#125; <br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()<br> 构造函数可以通过<span class="hljs-keyword">new</span>的方式来执行<br> 构造函数通过<span class="hljs-keyword">new</span>的方式来执行的话<span class="hljs-title class_">Foo</span> 内部的<span class="hljs-variable language_">this</span>指向将指向当前实例对象 foo<br> 它和函数唯一的区别就是通过函数的执行方式 <span class="hljs-variable language_">this</span> 指向会有所区别<br> prototype是所有实例的公共祖先 实例有能力拿到原型上的属性和方法<br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>===<span class="hljs-literal">null</span> <span class="hljs-comment">//true 是终点</span><br><br>constructor 原型上的一个属性 它指向实例对象<br></code></pre></td></tr></table></figure>

<h3 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h3><p> 数组的原型是array –&gt;array 的原型的对象是Object，只要在原型链上的属性都可以访问<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;小明&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">12</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">school</span> = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>]<br>    &#125;<br>    <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;初中&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Age</span>(<span class="hljs-params"></span>) &#123;<br>    &#125;<br>    <span class="hljs-title class_">Age</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>()<br>    <span class="hljs-keyword">var</span> age1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Age</span>()<br>*     <span class="hljs-keyword">var</span> age2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Age</span>()<br>    age1.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;小红&#x27;</span><br>    age1.<span class="hljs-property">age</span> = <span class="hljs-number">18</span><br>    age1.<span class="hljs-property">school</span>.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age1)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age2)<br><br></code></pre></td></tr></table></figure></p>
<p>  原型链继承的问题：引用值会共享,无法解决</p>
<p><img src="/images/theme/screenshot/yxl.png"></p>
<h3 id="2、构造函数继承"><a href="#2、构造函数继承" class="headerlink" title="2、构造函数继承"></a>2、构造函数继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">school</span> = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>]<br>   &#125;<br>   <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;初中&#x27;</span>)<br>   &#125;<br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">Age</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-title class_">Student</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>   &#125;<br>   <span class="hljs-keyword">var</span> age1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Age</span>()<br>   <span class="hljs-keyword">var</span> age2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Age</span>()<br>   age1.<span class="hljs-property">school</span>.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age1)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age2)<br></code></pre></td></tr></table></figure>
<p>构造函数继承解决了引用值共享的问题，但是无法拿到原型上的方法<br><img src="/images/theme/screenshot/gzhs.png"></p>
<h3 id="3、组合继承（伪经典继承）"><a href="#3、组合继承（伪经典继承）" class="headerlink" title="3、组合继承（伪经典继承）"></a>3、组合继承（伪经典继承）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">school</span> = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>]<br>   &#125;<br>   <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;初中&#x27;</span>)<br>   &#125;<br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">Age</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-title class_">Student</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-number">1</span><br>   &#125;<br>  <span class="hljs-number">2</span> <span class="hljs-title class_">Age</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>() <span class="hljs-comment">//会调用两次Student</span><br>   <span class="hljs-keyword">var</span> age1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Age</span>()<br>   <span class="hljs-keyword">var</span> age2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Age</span>()<br>   age1.<span class="hljs-property">school</span>.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age1)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age2)<br></code></pre></td></tr></table></figure>


<h3 id="4、原型式继承"><a href="#4、原型式继承" class="headerlink" title="4、原型式继承"></a>4、原型式继承</h3><p>这里主要借助 <strong>Object.create</strong> 方法实现普通对象的继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">school</span> = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>]<br>  &#125;<br>  <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;初中&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Age</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title class_">Student</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>  &#125;<br>  <span class="hljs-title class_">Age</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br>  <span class="hljs-keyword">var</span> age1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Age</span>()<br>  <span class="hljs-keyword">var</span> age2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Age</span>()<br>  age1.<span class="hljs-title function_">say</span>()<br>  age2.<span class="hljs-title function_">say</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age1)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age2)<br></code></pre></td></tr></table></figure>
<p>这种继承方式的缺点也很明显，用为object.create 方法实现的是浅拷贝，多个实力的引用类型属性或指向<br>相同的内存，存在篡改的可能</p>
<h3 id="5、寄生式继承"><a href="#5、寄生式继承" class="headerlink" title="5、寄生式继承"></a>5、寄生式继承</h3><p>寄生式继承在上面继承基础上进行优化，利用这个浅拷贝的能力再进行增强，添加一些方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> aa = &#123;<br>       <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;parent5&quot;</span>,<br>       <span class="hljs-attr">friends</span>: [<span class="hljs-string">&quot;p1&quot;</span>, <span class="hljs-string">&quot;p2&quot;</span>, <span class="hljs-string">&quot;p3&quot;</span>],<br>       <span class="hljs-attr">getName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">Age</span>(<span class="hljs-params">a</span>) &#123;<br>       <span class="hljs-keyword">let</span> conle = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(a)<br>       conle.<span class="hljs-property">getSchool</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">friends</span><br>       &#125;<br>       <span class="hljs-keyword">return</span> conle<br>   &#125;<br>   <span class="hljs-keyword">let</span> school =<span class="hljs-title class_">Age</span>(aa)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(school.<span class="hljs-title function_">getName</span>());<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(school.<span class="hljs-title function_">getSchool</span>())<br></code></pre></td></tr></table></figure>
<p><img src="/images/theme/screenshot/jssjc.png"><br>优缺点和原型式继承一样的缺点</p>
<h3 id="6、寄生组合式继承-经典继承"><a href="#6、寄生组合式继承-经典继承" class="headerlink" title="6、寄生组合式继承(经典继承)"></a>6、寄生组合式继承(经典继承)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">school</span> = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>]<br>   &#125;<br>   <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;初中&#x27;</span>)<br>   &#125;<br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">Age</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-title class_">Student</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>   &#125;<br>   <span class="hljs-title class_">Age</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br>   <span class="hljs-keyword">var</span> age1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Age</span>()<br>   <span class="hljs-keyword">var</span> age2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Age</span>()<br>   age1.<span class="hljs-title function_">say</span>()<br>   age2.<span class="hljs-title function_">say</span>()<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age1)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age2)<br>   <br></code></pre></td></tr></table></figure>


<h3 id="7、clss类继承（es6）"><a href="#7、clss类继承（es6）" class="headerlink" title="7、clss类继承（es6）"></a>7、clss类继承（es6）</h3><p>constructor,extends,super<br>constructor 构造器用来初始化对象成员，可定义属性和方法<br>extends 子类继承父类 例：子 extends 父<br>super 用来获取父类初始化的成员<br>父类不能调用子类的属性和方法，也就是说子类的变化不会影响到父类。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Percons</span>&#123;<br>       <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>)&#123;<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name<br>       &#125;<br>   &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Percons</span>&#123;<br>       <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,age</span>)&#123;<br>           <span class="hljs-variable language_">super</span>(name)<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span>=age<br>       &#125;<br>       <span class="hljs-title function_">fs</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> 今年<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>`</span>)<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">var</span> student=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">12</span>)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(student)<br>   student.<span class="hljs-title function_">fs</span>()<br></code></pre></td></tr></table></figure>
<p><img src="/images/theme/screenshot/classjc.png"></p>
<h3 id="ES6和ES5继承的区别"><a href="#ES6和ES5继承的区别" class="headerlink" title="ES6和ES5继承的区别"></a>ES6和ES5继承的区别</h3><p>1、ES5的继承是通过prototype或构造函数的机制来实现的。ES5的继承实质上是先创建子类的实例对象，让后将父类的方法添加到this上call(this)或apply(this)<br>2、ES6的继承机制完全不同，<strong>实质上是先创建父类的实例对象this（所以必须先调用父类的super（）方法），然后再用子类的构造函数修改this。</strong><br>具体的：ES6通过<strong>class</strong>关键字定义类，里面有构造方法，类之间透过<strong>extends</strong>关键字实现继承。子类必须在<strong>constructor</strong>方法中调用<strong>super</strong>方法，否则新建实例报错。<br>因为子类没有自己的this对象，而是继承了父类的this对象，然后对其进行加工。如果不调用super方法子类得不到this对象。<br>ps:<strong>super</strong>方法指代父类的实例，即父类的this对象，在子类的构造函数中，调用<strong>super</strong>后，才可以使用this关键字，否则报错。</p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><pre><code>Promise 是异步编程的一种解决方案，比传统的解决方案回调函数, 更合理和更强大 。
解决了回调地狱代码过多难以维护的问题
  Promise 的三种状态
* reslove 成功时的状态
* reject  失败时的状态
* pedding 未完成时的状态
从未完成到成功，从未完成到失败
</code></pre>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">url</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reslove</span>(&#123;<br>            <span class="hljs-attr">aa</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">bb</span>:<span class="hljs-number">2</span>,<br>            <span class="hljs-attr">cc</span>:<span class="hljs-number">3</span><br>        &#125;)<br>        <span class="hljs-comment">// reject(&#123;code:500,error:&#x27;请求失败&#x27;&#125;)</span><br>    &#125;)<br>&#125;<br><span class="hljs-keyword">var</span> por=<span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;111&#x27;</span>)<br>por.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求成功&#x27;</span>,res)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(por)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求失败&#x27;</span>,error)<br>&#125;)<br>   <br></code></pre></td></tr></table></figure>
<p>then()<br>catch()<br>finally()<br>then是实例状态发生改变时的回调函数，第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数<br>then方法返回的是一个新的Promise实例，也就是promise能链式书写的原因<br>catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数<br>finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作<br>调用reslove()方法才能调用then，reslove传出来的值是then的形参</p>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h3><p>async和await 是Generator的语法糖，async关键字代表后面的函数中有异步操作，await 表示等待一个异步方法执行完成。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> a= <span class="hljs-keyword">await</span> ...<br>&#125;<br></code></pre></td></tr></table></figure>
<p>async函数 返回一个promise 对象，单独一个async函数 和promise执行的功能是一样的。<br>await 就是等promise的返回结果后才会继续往下执行<br>await 异步等待 等待的是一个promise对象，后面必须跟一个promise对象但是不用写 .then()，直接就可以拿到返回值<br>调用async 函数不会造成代码堵塞，但是在await 会引起async函数内部代码的堵塞</p>
<p>promise 和async&#x2F;await区别<br>promise是通过.thne()和.catch()来去处理数据和捕获异常的，并且是链式调用，虽然比回调函数好很多但是还是容易造成代码多层堆叠难以维护；<br>async&#x2F;await则是通过tyr{}.catch{}进行捕获直接抛出异常<br>async&#x2F;await最大的优点是使代码看起来更像同步遇到await立即执行返回结果在执行后面的操作，promise.then()的方式有可能结果还没返回就已经执行了外面的操作</p>
<h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p>先执行同步任务后执行异步任务<br><strong>一、单线程</strong><br>一个任务执行完之后才能执行另一个<br><strong>二、process.nexTick和setlmmediate方法</strong><br>process.nexTick()在同步之后异步之前执行<br>setlmmediate()异步之后执行<br><strong>三、事件循环</strong><br>事件循环会持续的循环任务队列里的方法有任务则放到运行栈里<br><strong>宏任务，微任务</strong><br>宏任务：计时器，ajax，读取文件<br>微任务：promise,.then<br><strong>注意：new Promise里的代码是同步的，then放到任务队列是异步的</strong><br>执行顺序：<br>1、同步程序<br>2、process.nexTick()<br>3、微任务<br>4、宏任务<br>5、setlmmediate()<br><img  src="/images/theme/screenshot/JavaScriptYXJZ.png"  ><span class="image-caption">运行机制图解</span></p>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>JavaScript的垃圾回收机制，清除无用的变量释放多余的内存，展现更好的性能。<br>在JavaScript中，具有自动垃圾回收机制，也就是说执行环境会自动负责管理代码执行过程中的内存使用情况，会自动清除一些用不到的变量，<br>以此来释放内存，该机制每隔一段时间会执行一次。<br>JavaScript中能实现垃圾回收机制的方式一共有两种：<strong>标记清除，引用计数</strong><br><strong>标记清除</strong><br>标记清除是JavaScript中最常用的垃圾回收方式。它的执行方式是在执行环境中每创建一个变量，就会对该变量进行标记，等到执行垃圾回收机制时在根据标记来决定是否进行回收。<br><strong>引用计数</strong><br>引用计数 是一种不太常用的回收机制 顾名思义就是针对值为引用数据类型的变量进行计数。<br>引用计数的回收机制是当声明一个变量就会给改变量设定一个值为0的引用次数，当改变量被引用了引用次数就会+1取消则-1若引用次数不变一直为0就会被回收机制给清除不为0则不做任何更改</p>
]]></content>
  </entry>
  <entry>
    <title>Pinia</title>
    <url>/2022/12/30/Pinia/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>React</title>
    <url>/2022/12/27/React/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/2022/12/27/TypeScript/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2022/12/27/Vue/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Gitee</title>
    <url>/2022/12/27/gitee/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/09/js/</url>
    <content><![CDATA[<script>
    // function Foo() {
    //     this.a = '小明'
    // }
    // var foo = new Foo()
    // console.log(foo);

    //原型链继承
    // function Student() {
    //     this.name = '小明'
    //     this.age = 12
    //     this.school = ['语文', '数学']
    // }
    // Student.prototype.say = function () {
    //     console.log('初中')
    // }
    // function Age() {
    // }
    // Age.prototype = new Student()
    // var age1 = new Age()
    // var age2 = new Age()
    // age1.name = '小红'
    // age1.age = 18
    // age1.school.splice(0, 1)
    // console.log(age1)
    // console.log(age2)

    //构造函数继承
    // function Student() {

    //     this.school = ['语文', '数学']
    // }
    // Student.prototype.say = function () {
    //     console.log('初中')
    // }
    // function Age() {
    //     Student.call(this)
    // }
    // // Age.prototype = new Student()
    // var age1 = new Age()
    // var age2 = new Age()
    // age1.school.splice(0, 1)
    // console.log(age1)
    // console.log(age2)

    // 组合继承
    //     function Student() {

    //        this.school = ['语文', '数学']
    //    }

    //    Student.prototype.say = function () {
    //        console.log('初中')
    //    }

    //    function Age() {
    //        Student.call(this)
    //    }
    //    Age.prototype = new Student()
    //    var age1 = new Age()
    //    var age2 = new Age()

    //    age1.school.splice(0, 1)
    //    age1.say()
    //    console.log(age1)
    //    console.log(age2)

    //寄生组合继承
    //     function Student() {

    //        this.school = ['语文', '数学']
    //    }

    //    Student.prototype.say = function () {
    //        console.log('初中')
    //    }

    //    function Age() {
    //        Student.call(this)
    //    }
    //    Age.prototype = Object.create(Student.prototype)
    //    var age1 = new Age()
    //    var age2 = new Age()

    //    age1.say()
    //    age2.say()
    //    console.log(age1)
    //    console.log(age2)

    //寄生式继承
    // function Student() {

    //     this.school = ['语文', '数学']
    // }
    // const aa = {
    //     name: "parent5",
    //     friends: ["p1", "p2", "p3"],
    //     getName: function () {
    //         return this.name;
    //     }
    // }


    // function Age(a) {
    //     let conle = Object.create(a)
    //     conle.getSchool = function () {
    //         return this.friends
    //     }
    //     return conle
    // }
    // let school =Age(aa)

    // console.log(school.getName());
    // console.log(school.getSchool())

    // class Percons{
    //     constructor(name){
    //         this.name=name
    //     }
    // }
    // class Student extends Percons{
    //     constructor(name,age){
    //         super(name)
    //         this.score=age
    //     }
    //     fs(){
    //         console.log(`我是${this.name} 今年${this.age}`)
    //     }
    // }
    // var student=new Student('张三',12)
    // console.log(student)
    // student.fs()

    function ajax(url){
        return new Promise((reslove,reject)=>{
            reslove({
                aa:1,
                bb:2,
                cc:3
            })
            // reject({code:500,error:'请求失败'})
        })
    }
    var por=ajax('111')
    por.then((res)=>{
        console.log('请求成功',res)
    console.log(por)

    }).catch((error)=>{
        console.log('请求失败',error)
    })

    //排序和拷贝
 // const arr = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 'aa', 'aa']
      // let arr1=Array.from(new Set(arr)) 
      // console.log(arr1);
      // let len = arr.length
      // for (let i = 0; i < len; i++) {
      //   for (let j = i + 1; j < len; j++) {
      //     if(arr[j]==arr[i]){
      //       arr.splice(i,1)
      //       len--
      //       j--
      //     }
      //   }
      // }
      // console.log(arr);
      // let newarr=[]
      // arr.forEach(item=>{
      //   if(newarr.indexOf(item)==-1) newarr.push(item)
      // })
      // console.log(newarr);
      // let newarr=[]
      // arr.forEach(item=>{
      //   if(!newarr.includes(item)) newarr.push(item)
      // })
      // console.log(newarr);
      // const removeDuplicate = (arr) => {
      //   return arr.filter((item, index) => {
      //     return arr.indexOf(item) === index
      //   })
      // }
      // let zxc= removeDuplicate(arr)
      // console.log(zxc);
      // let obj={
      //   aa:1,
      //   bb:['1','2','3']
      // }
      // let obj2={...obj}
      // let obj2=Object.assign({},obj)
      // obj2.aa=2
      // obj2.bb[1]='5'
      // console.log(obj2,'拷贝');
      // console.log(obj,'源数据');
      // console.log(obj==obj2);

     

</script>]]></content>
  </entry>
</search>
